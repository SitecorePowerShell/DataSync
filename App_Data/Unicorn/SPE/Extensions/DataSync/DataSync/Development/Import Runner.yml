---
ID: "cd9b18d5-0361-486f-9839-02fb9c3cff7d"
Parent: "a5fdab53-7805-4b12-ae4e-37a8d831ab23"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: /sitecore/system/Modules/PowerShell/Script Library/SPE/Extensions/DataSync/Development/Import Runner
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    param(
        $ImportScriptItem = $SitecoreContextItem,
        $Watch = [System.Diagnostics.Stopwatch]::StartNew()
    )
    
    Import-Function -Name New-ItemName
    Import-Function -Name Invoke-SourceRequest
    
    class FieldIds {
        static [ID]$SourcePath = "{07476EF8-B3B6-46A1-82D7-0E793E7BA658}"
        static [ID]$SqlScript = "{53B07925-8E6B-49E5-B58D-F8E2B0489EFE}"
        static [ID]$BeforeImportScript = "{2B47ED82-A477-4D3B-AE17-FC1B64D54440}"
        static [ID]$ImportTemplate = "{66103474-141A-4CD7-BC64-3E7CF0858441}"
        static [ID]$ItemName = "{FAC6C69F-07F1-4801-9CB8-2DCB77AFC71D}"
        static [ID]$ItemDisplayName = "{6D7F51CA-56E5-4E30-8735-CDF77BEABEDE}"
        static [ID]$FieldMapping = "{C1561963-9C44-444B-9002-732147905DA2}"
        static [ID]$ItemSyncField = "{219658A1-0CD2-4A77-AB1A-D593E7CCE28D}"
        static [ID]$SkipExisting = "{412DDCEA-B18A-4393-8F09-E23F6AAC328E}"
        static [ID]$ForEachItemScript = "{59D7A252-80F2-4AD4-A895-A06818EE5C15}"
        static [ID]$DestinationPath = "{CFBA481F-6001-4C0F-A1FC-2FB0CE049F9C}"
        static [ID]$ItemParentExpression = "{35DE0F36-FC21-4F02-BC7F-9B3D2BCAA6EC}"
        static [ID]$AfterImportScript = "{5721604B-75FF-46A7-984D-6A6F8E8BF4AB}"
        static [ID]$PaginationScript = "{E7D5151C-808C-4DB2-A0AE-EBCB662C15C7}"
    }
    
    class TemplateIds {
        static [ID]$ImportScript = "{3D772520-C232-4B3D-93B6-6941CDB3BF1D}"
        static [ID]$ImportFlatFileScript = "{5B9676BD-D65F-4F0F-A31E-318961A8DC86}"
        static [ID]$ImportSqlScript = "{82FC1AF4-3CB0-4A8A-94B7-D20F25E28735}"
        static [ID]$ImportWebServiceScript = "{286B8D8D-EEAD-48CB-87E2-4C4273F0A67E}"
    }
    
    $db = Get-Database -Name "master"
    
    $importScriptItemTemplate = [Sitecore.Data.Managers.TemplateManager]::GetTemplate($importScriptItem)
    if(!$importScriptItemTemplate.DescendsFromOrEquals([TemplateIds]::ImportScript)) {
        $importScriptItemTemplate = [Sitecore.Data.Managers.TemplateManager]::GetTemplate($PSScript)
        if(!$importScriptItemTemplate.DescendsFromOrEquals([TemplateIds]::ImportScript)) {
            Write-Log "Unable to continue because the import script item could not be determined."
            Write-Host "Unable to continue because the import script item could not be determined."
            exit
        } else {
            $importScriptItem = $PSScript
        }
    }
    Set-Location -Path $importScriptItem.ProviderPath
    $status = [PSCustomObject]@{}
    $status | Add-Member -MemberType ScriptMethod -Name ToString -Value { "[$($watch.Elapsed)] Processing $($importScriptItem.Name)" } -Force
    $timestamp = [PSCustomObject]@{}
    $timestamp | Add-Member -MemberType ScriptMethod -Name ToString -Value { "[$([datetime]::Now)]" } -Force
    
    Write-Host "$($timestamp) Running $($importScriptItem.Name)"
    Write-Progress -Activity "Loading data from source" -Status $status
    $importTemplateId = $importScriptItem.Fields[[FieldIds]::ImportTemplate].Value
    $importFieldMappings = $importScriptItem.Fields[[FieldIds]::FieldMapping].Value -split "&" | 
        ForEach-Object { [System.Web.HttpUtility]::UrlDecode($_) }
    $importFieldMappingsLookup = @{}
    foreach($importFieldMapping in $importFieldMappings) {
        $split = $importFieldMapping -split "="
        if($split -and $split.Length -le 2) {
            $importFieldMappingsLookup[$split[0]] = $split[1]
        }
    }
    
    $sourcePath = $importScriptItem.Fields[[FieldIds]::SourcePath].Value
    if($sourcePath -notmatch "http|\\\\|[a-z]:") {
        $sourcePath = Invoke-Expression -Command $sourcePath
    }
    
    Write-Host "$($timestamp) Selecting import script $($importScriptItem.TemplateId)"
    $sourceItems = @()
    $loadFromSource = $true
    if($lastImportScriptId -ne $importScriptItem.ID -and $lastSourcePath -and $lastSourcePath -eq $sourcePath) {
        if($lastImport) {
            Write-Host "$($timestamp) Reusing last items loaded from source"
            $sourceItems = $lastImport
            $loadFromSource = $false
        }
    }
    
    $beforeImportScript = $importScriptItem.Fields[[FieldIds]::BeforeImportScript].Value
    $paginationScript = $importScriptItem.Fields[[FieldIds]::PaginationScript].Value    
    if($loadFromSource) {
        Write-Host "$($timestamp) Loading items from source"
        Write-Host "$($timestamp) Source $($sourcePath)"
        $lastResult = Invoke-SourceRequest -ImportItem $importScriptItem -SourcePath $sourcePath
    
        if($lastResult) {
            $sourceItems += $lastResult
        }
        
        if($lastResult -and ![string]::IsNullOrEmpty($paginationScript)) {
    
            while($true) {
                Write-Progress -Activity "Running pagination script" -Status $status
                $pagedSourcePath = Invoke-Expression -Command $paginationScript
                if([string]::IsNullOrEmpty($pagedSourcePath)) { break }
                Write-Host "$($timestamp) Pagination source $($pagedSourcePath)"
                $lastResult = Invoke-SourceRequest -ImportItem $importScriptItem -SourcePath $pagedSourcePath
                if($lastResult) {
                    $sourceItems += $lastResult
                } else {
                    break
                }
            }
        }
        
        if($sourceItems -and $sourceItems -isnot [array]) {
            $sourceItemsTemp = $sourceItems
            $sourceItems = [System.Collections.ArrayList]@()
            $sourceItems.Add($sourceItemsTemp) > $null
        }
        
        if(![string]::IsNullOrEmpty($beforeImportScript)) {
            Write-Progress -Activity "Running pre import script" -Status $status
            Invoke-Expression -Command $beforeImportScript
        }
        
        $lastImportScriptId = $importScriptItem.ID
        $lastSourcePath = $sourcePath
        $lastImport = $sourceItems
    } else {
        if(![string]::IsNullOrEmpty($beforeImportScript)) {
            Write-Progress -Activity "Running pre import script" -Status $status
            Invoke-Expression -Command $beforeImportScript
        }
    }
    
    if($sourceItems -isnot [array]) {
        $sourceItemsTemp = $sourceItems
        $sourceItems = [System.Collections.ArrayList]@()
        $sourceItems.Add($sourceItemsTemp) > $null
    }
    
    Write-Progress -Activity "Configuring import settings" -Status $status
    $itemSyncFieldName = $importScriptItem.Fields[[FieldIds]::ItemSyncField].Value
    $checkSyncField = $false
    $skipExisting = [Sitecore.MainUtil]::GetBool($importScriptItem.Fields[[FieldIds]::SkipExisting].Value, $false)
    if(![string]::IsNullOrEmpty($itemSyncFieldName)) {
        $checkSyncField = $true
    }
    
    $destinationItemId = $importScriptItem.Fields[[FieldIds]::DestinationPath].Value
    $destinationRoot = Get-Item -Path "master:" -ID $destinationItemId
    $syncFieldLookup = @{}
    if($checkSyncField) {
        $existingItems = $destinationRoot.Axes.GetDescendants() | Where-Object { $_.TemplateId -eq $importTemplateId } | Initialize-Item
        foreach($existingItem in $existingItems) {
            $existingItemSyncFieldValue = $existingItem.Fields[$itemSyncFieldName].Value
            if(!$existingItemSyncFieldValue) {
                $member = Get-Member -InputObject $existingItem -Name $itemSyncFieldName
                if($member) {
                    $existingItemSyncFieldValue = $existingItem.($member.Name)
                }
            }
            if([string]::IsNullOrEmpty($existingItemSyncFieldValue)) { continue }
            $syncFieldLookup[$existingItemSyncFieldValue] = $existingItem
        }
    }
    
    $destinationItems = [System.Collections.ArrayList]@()
    $count = 0
    $countTotal = $sourceItems.Count
    $skippedItemsCount = 0
    $newItemsCount = 0
    $existingItemsUpdatedCount = 0
    $parentPathExpression = $importScriptItem.Fields[[FieldIds]::ItemParentExpression].Value
    foreach($sourceItem in $sourceItems) {
        $count++
        Write-Host "$($timestamp) Processing source item $($count) of $($countTotal)"
        $itemName = Invoke-Expression -Command $importScriptItem.Fields[[FieldIds]::ItemName].Value
        Write-Progress -Activity "Creating or updating destination items" -Status $status -PercentComplete ($count / $countTotal * 100) -CurrentOperation "$($itemName)"
        $destinationItem = $null
        if($checkSyncField -and $importFieldMappingsLookup.ContainsKey($itemSyncFieldName)) {
            $lookupValue = Invoke-Expression -Command $importFieldMappingsLookup[$itemSyncFieldName]
            if($lookupValue -and $syncFieldLookup.ContainsKey($lookupValue)) {
                if($skipExisting) { 
                    Write-Host "- [S] Item found by matching field $($itemSyncFieldName)"
                    $skippedItemsCount++
                    continue
                }
                $destinationItem = $syncFieldLookup[$lookupValue]
            }
        }
        
        $path = "$($destinationRoot.ProviderPath)\$($itemName)"
        if(![string]::IsNullOrEmpty($parentPathExpression)) {
            $parentPath = Invoke-Expression -Command $parentPathExpression
            $parentPath = "$($destinationRoot.ProviderPath)\$($parentPath.Trim('\','/'))"
            $path = "$($parentPath)\$($itemName)"
            $parentItem = Get-Item -Path $parentPath
        } else {
            $parentItem = $destinationRoot
        }
    
        if((Test-Path -Path $path)) {
            Write-Host "- [!] Item exists at path $($path)"
            $destinationItem = Get-Item -Path $path
        }
        if(!$destinationItem) {
            Write-Host "- [A] $($path)"
            $newItemsCount++
            $destinationItem = New-Item -Parent $parentItem -Name $itemName -ItemType $importTemplateId
        } else {
            Write-Host "- [S] Item with the same name exists"
            $existingItemsUpdatedCount++
        }
        
        $displayName = $importScriptItem.Fields[[FieldIds]::ItemDisplayName].Value
        if(![string]::IsNullOrEmpty($displayName)) {
            $displayName = Invoke-Expression -Command $displayName
        }
        $destinationItem.Editing.BeginEdit()
        if(![string]::IsNullOrEmpty($displayName)) {
            $destinationItem[[Sitecore.FieldIDs]::DisplayName] = $displayName
        }
        foreach($fieldName in $importFieldMappingsLookup.Keys) {
            if($destinationItem.Fields[$fieldName]) {
                $destinationItem.Fields[$fieldName].Value = Invoke-Expression -Command $importFieldMappingsLookup[$fieldName]
            } else {
                Write-Host " - [S] $($fieldName) does not exist on the item"
            }
        }
        
        if(![string]::IsNullOrEmpty($importScriptItem.Fields[[FieldIds]::ForEachItemScript].Value)) {
            Invoke-Expression -Command $importScriptItem.Fields[[FieldIds]::ForEachItemScript].Value
        }
        
        $destinationItem.Editing.EndEdit() > $null
        $destinationItems.Add($destinationItem) > $null
    }
    
    Write-Progress -Activity "Running post import script" -Status $status
    $afterImportScript = $importScriptItem.Fields[[FieldIds]::AfterImportScript].Value
    if(![string]::IsNullOrEmpty($afterImportScript)) {
        Invoke-Expression -Command $afterImportScript
    }
    
    Write-Host "$($timestamp) $($importScriptItem.Name) completed" -ForegroundColor Green
    $time = $watch.ElapsedMilliseconds / 1000
    [PSCustomObject]@{
        "Import items processed" = $sourceItems.Count
        "New items created" = $newItemsCount
        "Existing items skipped" = $skippedItemsCount
        "Existing items updated" = $existingItemsUpdatedCount
        "Execution time in seconds" = $time
    } | Format-List
    
    Write-Progress -Activity "Completed importing data for $($importScriptItem.Name)" -Completed -Status "Import Complete"
    
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20190109T183205Z
