---
ID: "cd9b18d5-0361-486f-9839-02fb9c3cff7d"
Parent: "a5fdab53-7805-4b12-ae4e-37a8d831ab23"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: /sitecore/system/Modules/PowerShell/Script Library/SPE/Extensions/DataSync/Development/Import Runner
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    param(
        $ImportScriptItem = $SitecoreContextItem,
        $Watch = [System.Diagnostics.Stopwatch]::StartNew()
    )
    
    Import-Function -Name Invoke-SqlCommand
    Import-Function -Name New-ItemName
    Import-Function -Name Get-UriContent
    Import-Function -Name Invoke-ProcessSourceItems
    
    class FieldIds {
        static [ID]$SourcePath = "{07476EF8-B3B6-46A1-82D7-0E793E7BA658}"
        static [ID]$SqlScript = "{53B07925-8E6B-49E5-B58D-F8E2B0489EFE}"
        static [ID]$BeforeImportScript = "{2B47ED82-A477-4D3B-AE17-FC1B64D54440}"
        static [ID]$ImportTemplate = "{66103474-141A-4CD7-BC64-3E7CF0858441}"
        static [ID]$ForceIdScript = "{B0A60B70-8A87-4526-ABF4-62A721961217}"
        static [ID]$ItemName = "{FAC6C69F-07F1-4801-9CB8-2DCB77AFC71D}"
        static [ID]$ItemDisplayName = "{6D7F51CA-56E5-4E30-8735-CDF77BEABEDE}"
        static [ID]$FieldMapping = "{C1561963-9C44-444B-9002-732147905DA2}"
        static [ID]$ItemSyncField = "{219658A1-0CD2-4A77-AB1A-D593E7CCE28D}"
        static [ID]$SkipExisting = "{412DDCEA-B18A-4393-8F09-E23F6AAC328E}"
        static [ID]$ForEachItemScript = "{59D7A252-80F2-4AD4-A895-A06818EE5C15}"
        static [ID]$DestinationPath = "{CFBA481F-6001-4C0F-A1FC-2FB0CE049F9C}"
        static [ID]$ItemParentExpression = "{35DE0F36-FC21-4F02-BC7F-9B3D2BCAA6EC}"
        static [ID]$AfterImportScript = "{5721604B-75FF-46A7-984D-6A6F8E8BF4AB}"
        static [ID]$NextPageScript = "{F23573B3-33F2-4448-B213-93B8607A9612}"
        static [ID]$LanguageScript = "{EDD8DCB0-7EB3-48A6-9CB6-369DE0CFE6B2}"
        static [ID]$GenerateHeadersScript = "{3E3448F8-5D08-45D9-BC45-73040EA1711C}"
    }
    
    class TemplateIds {
        static [ID]$ImportScript = "{3D772520-C232-4B3D-93B6-6941CDB3BF1D}"
        static [ID]$ImportFlatFileScript = "{5B9676BD-D65F-4F0F-A31E-318961A8DC86}"
        static [ID]$ImportSqlScript = "{82FC1AF4-3CB0-4A8A-94B7-D20F25E28735}"
        static [ID]$ImportWebServiceScript = "{286B8D8D-EEAD-48CB-87E2-4C4273F0A67E}"
    }
    
    $db = Get-Database -Name "master"
    
    $importScriptItemTemplate = [Sitecore.Data.Managers.TemplateManager]::GetTemplate($importScriptItem)
    if(!$importScriptItemTemplate.DescendsFromOrEquals([TemplateIds]::ImportScript)) {
        $importScriptItemTemplate = [Sitecore.Data.Managers.TemplateManager]::GetTemplate($PSScript)
        if(!$importScriptItemTemplate.DescendsFromOrEquals([TemplateIds]::ImportScript)) {
            Write-Log "Unable to continue because the import script item could not be determined."
            Write-Host "Unable to continue because the import script item could not be determined."
            exit
        } else {
            $importScriptItem = $PSScript
        }
    }
    Set-Location -Path $importScriptItem.ProviderPath
    $status = [PSCustomObject]@{}
    $status | Add-Member -MemberType ScriptMethod -Name ToString -Value { "[$($watch.Elapsed)] Processing $($importScriptItem.Name)" } -Force
    $timestamp = [PSCustomObject]@{}
    $timestamp | Add-Member -MemberType ScriptMethod -Name ToString -Value { "[$([datetime]::Now)]" } -Force
    
    Write-Host "$($timestamp) Running $($importScriptItem.Name)"
    Write-Progress -Activity "Loading data from source" -Status $status
    $importTemplateId = $importScriptItem.Fields[[FieldIds]::ImportTemplate].Value
    $importFieldMappings = $importScriptItem.Fields[[FieldIds]::FieldMapping].Value -split "&" | 
        ForEach-Object { [System.Web.HttpUtility]::UrlDecode($_) }
    $importFieldMappingsLookup = @{}
    foreach($importFieldMapping in $importFieldMappings) {
        $split = $importFieldMapping -split "="
        if($split -and $split.Length -le 2) {
            $fieldName = $split[0].Replace("_", " ")
            $importFieldMappingsLookup[$fieldName] = $split[1]
        }
    }
    
    $sourcePath = $importScriptItem.Fields[[FieldIds]::SourcePath].Value
    if($sourcePath -notmatch "http|\\\\|[a-z]:") {
        $sourcePath = Invoke-Expression -Command $sourcePath
    }
    
    Write-Host "$($timestamp) Selecting import script $($importScriptItem.TemplateId)"
    $sourceItems = @()
    $loadFromSource = $true
    #if($lastSourcePath -and $lastSourcePath -eq $sourcePath) {
    #    if($lastImport) {
    #        Write-Host "$($timestamp) Reusing last items loaded from source"
    #        $sourceItems = $lastImport
    #        $loadFromSource = $false
    #    }
    #}
    
    $statTracker = @{
        "Import items processed" = 0
        "New items created" = 0
        "Existing items skipped" = 0
        "Existing items updated" = 0
        "Execution time in seconds" = 0
    }
    
    if($loadFromSource) {
        switch($importScriptItem.TemplateId) {
            ([TemplateIds]::ImportFlatFileScript) {
                # Flat File
                $extension = [System.IO.Path]::GetExtension($sourcePath)
                if([string]::IsNullOrEmpty($extension)) { exit }
                if($extension -eq ".csv") {
                    $sourceItems = Import-Csv -Path $sourcePath
                } elseif ($extension -eq ".xml") {
                    $sourceItems = [xml](Get-Content -Path $sourcePath -Raw)
                } elseif ($extension -eq ".json") {
                    $sourceItems = (Get-Content -Path $sourcePath -Raw) | ConvertFrom-Json
                } else {
                    $sourceItems = Get-Content -Path $sourcePath -Raw
                }
                
                Invoke-ProcessSourceItems -SourceItems $sourceItems -ScriptItem $importScriptItem -FieldMappings $importFieldMappingsLookup -StatTracker ([ref]$statTracker)
            }
            ([TemplateIds]::ImportSqlScript) {
                # Sql Script
                $query = $importScriptItem.Fields[[FieldIds]::SqlScript].Value
                $sourceItems = Invoke-SqlCommand -Query $query -Connection $sourcePath
                
                Invoke-ProcessSourceItems -SourceItems $sourceItems -ScriptItem $importScriptItem -FieldMappings $importFieldMappingsLookup -StatTracker ([ref]$statTracker)
            }
            ([TemplateIds]::ImportWebServiceScript) {
                # Web service
                if (![Net.ServicePointManager]::SecurityProtocol.HasFlag([Net.SecurityProtocolType]::Tls12)) {
                    [Net.ServicePointManager]::SecurityProtocol += [Net.SecurityProtocolType]::Tls12
                }
    
                $generateHeadersScript = $importScriptItem.Fields[[FieldIds]::GenerateHeadersScript].Value
                if (![string]::IsNullOrEmpty($generateHeadersScript)) {
                   $PSDefaultParameterValues = Invoke-Expression -Command $generateHeadersScript
                }
                
                while (![string]::IsNullOrEmpty($sourcePath)) {
                    $sourceItems = Get-UriContent -sourcePath $sourcePath
                    
                    $nextPageSourcePath = "";
                    
                    Write-Progress -Activity "Running next page script" -Status $status
                    $nextPageScript = $importScriptItem.Fields[[FieldIds]::NextPageScript].Value
                    if(![string]::IsNullOrEmpty($nextPageScript)) {
                        $nextPageSourcePath = Invoke-Expression -Command $nextPageScript
                    }
                    
                    $sourcePath = $nextPageSourcePath
                    
                    Invoke-ProcessSourceItems -SourceItems $sourceItems -ScriptItem $importScriptItem -FieldMappings $importFieldMappingsLookup -StatTracker ([ref]$statTracker)
                }
            }
            default {
                Write-Host "Unable to complete because the import script is unrecognized." -ForegroundColor White -BackgroundColor Red
                exit
            }
        }
        
        $lastSourcePath = $sourcePath
        $lastImport = $sourceItems
    }
    
    Write-Host "$($timestamp) $($importScriptItem.Name) completed" -ForegroundColor Green
    $time = $watch.ElapsedMilliseconds / 1000
    
    $statTracker["Execution time in seconds"] = $time
    $statTracker | Format-List
    
    Write-Progress -Activity "Completed importing data for $($importScriptItem.Name)" -Completed -Status "Import Complete"
    
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20190109T183205Z
