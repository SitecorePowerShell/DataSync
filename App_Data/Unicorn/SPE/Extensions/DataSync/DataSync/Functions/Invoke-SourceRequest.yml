---
ID: "97338054-16ac-43dc-8e9e-292e0e6aa017"
Parent: "d3c93968-b343-4fa5-be29-0b7138359988"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/SPE/Extensions/DataSync/Functions/Invoke-SourceRequest"
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    Import-Function -Name Invoke-SqlCommand
    
    function Invoke-SourceRequest {
        param(
            [Item]$ImportItem,
            [string]$SourcePath
        )
        
        $sourceItems = @()
        
        switch($importScriptItem.TemplateId) {
            ([TemplateIds]::ImportFlatFileScript) {
                # Flat File
                $extension = [System.IO.Path]::GetExtension($sourcePath)
                if([string]::IsNullOrEmpty($extension)) { exit }
                if($extension -eq ".csv") {
                    $sourceItems = Import-Csv -Path $sourcePath
                } elseif ($extension -eq ".xml") {
                    $sourceItems = [xml](Get-Content -Path $sourcePath -Raw)
                } elseif ($extension -eq ".json") {
                    $sourceItems = (Get-Content -Path $sourcePath -Raw) | ConvertFrom-Json
                } else {
                    $sourceItems = Get-Content -Path $sourcePath -Raw
                }
            }
            ([TemplateIds]::ImportSqlScript) {
                # Sql Script
                $query = $importScriptItem.Fields[[FieldIds]::SqlScript].Value
                $sourceItems = Invoke-SqlCommand -Query $query -Connection $sourcePath
            }
            ([TemplateIds]::ImportWebServiceScript) {
                # Web service
                if (![Net.ServicePointManager]::SecurityProtocol.HasFlag([Net.SecurityProtocolType]::Tls12)) {
                    [Net.ServicePointManager]::SecurityProtocol += [Net.SecurityProtocolType]::Tls12
                }
                
                $response = Invoke-WebRequest -UseBasicParsing -Uri $sourcePath
                $contentType = $response.Headers["Content-Type"]
                if([string]::IsNullOrEmpty($contentType)) { exit }
                $content = $response.Content
                if($content -is [byte[]]) {
                    $content = [System.Text.Encoding]::UTF8.GetString($content)
                }
                if($contentType -match "json") {
                    $sourceItems = $content | ConvertFrom-Json
                } elseif($contentType -match "xml") {
                    $sourceItems = [xml]$content
                } else {
                    $sourceItems = $content
                }
            }
            default {
                Write-Host "Unable to complete because the import script is unrecognized." -ForegroundColor White -BackgroundColor Red
                exit
            }
        }
        
        ,$sourceItems
    }
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20190210T022528Z
